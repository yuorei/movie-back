package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.41

import (
	"context"

	"github.com/yuorei/video-server/app/domain"
	model "github.com/yuorei/video-server/app/domain/models"
	"github.com/yuorei/video-server/graph/generated"
)

// UploadVideo is the resolver for the UploadVideo field.
func (r *mutationResolver) UploadVideo(ctx context.Context, input model.UploadVideoInput) (*model.VideoPayload, error) {
	videoID := domain.NewVideoID()
	uploadVideo := domain.NewUploadVideo(videoID, input.Video, input.ThumbnailImage, input.Title, input.Description)

	uploadedVideo, err := r.usecase.UploadVideo(ctx, uploadVideo)
	if err != nil {
		return nil, err
	}

	return &model.VideoPayload{
		ID:                uploadedVideo.ID,
		VideoURL:          uploadedVideo.VideoURL,
		ThumbnailImageURL: uploadedVideo.ThumbnailImageURL,
		Title:             uploadedVideo.Title,
		Description:       uploadedVideo.Description,
		CreatedAt:         uploadedVideo.CreatedAt.String(),
		UpdatedAt:         uploadedVideo.CreatedAt.String(),
	}, nil
}

// ID is the resolver for the id field.
func (r *videoResolver) ID(ctx context.Context, obj *model.Video) (string, error) {
	return obj.ID, nil
}

// Uploader is the resolver for the uploader field.
func (r *videoResolver) Uploader(ctx context.Context, obj *model.Video) (*model.User, error) {
	return &model.User{}, nil
}

// ID is the resolver for the id field.
func (r *videoPayloadResolver) ID(ctx context.Context, obj *model.VideoPayload) (string, error) {
	return obj.ID, nil
}

// Uploader is the resolver for the uploader field.
func (r *videoPayloadResolver) Uploader(ctx context.Context, obj *model.VideoPayload) (*model.User, error) {
	return &model.User{}, nil
}

// Video returns generated.VideoResolver implementation.
func (r *Resolver) Video() generated.VideoResolver { return &videoResolver{r} }

// VideoPayload returns generated.VideoPayloadResolver implementation.
func (r *Resolver) VideoPayload() generated.VideoPayloadResolver { return &videoPayloadResolver{r} }

type videoResolver struct{ *Resolver }
type videoPayloadResolver struct{ *Resolver }
