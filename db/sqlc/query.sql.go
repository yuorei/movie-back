// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"
)

const createComment = `-- name: CreateComment :execresult
INSERT INTO comment (id, video_id, text, user_id, created_at,updated_at) VALUES (?, ?, ?, ?, ?, ?)
`

type CreateCommentParams struct {
	ID        string
	VideoID   string
	Text      string
	UserID    sql.NullString
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createComment,
		arg.ID,
		arg.VideoID,
		arg.Text,
		arg.UserID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
}

const createTags = `-- name: CreateTags :execresult
INSERT INTO tag (tag_name) VALUES (?)
`

func (q *Queries) CreateTags(ctx context.Context, tagName string) (sql.Result, error) {
	return q.db.ExecContext(ctx, createTags, tagName)
}

const createVideo = `-- name: CreateVideo :execresult
INSERT INTO video (id, title, description, video_url, thumbnail_image_url, is_private,is_external_cutout , is_adult, is_ad, uploader_id, created_at,updated_at,watch_count) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateVideoParams struct {
	ID                string
	Title             string
	Description       sql.NullString
	VideoUrl          string
	ThumbnailImageUrl string
	IsPrivate         bool
	IsExternalCutout  bool
	IsAdult           bool
	IsAd              bool
	UploaderID        string
	CreatedAt         time.Time
	UpdatedAt         time.Time
	WatchCount        int32
}

func (q *Queries) CreateVideo(ctx context.Context, arg CreateVideoParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createVideo,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.VideoUrl,
		arg.ThumbnailImageUrl,
		arg.IsPrivate,
		arg.IsExternalCutout,
		arg.IsAdult,
		arg.IsAd,
		arg.UploaderID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.WatchCount,
	)
}

const createVideoTags = `-- name: CreateVideoTags :execresult
INSERT INTO video_tags (video_id, tag_id) VALUES (?, ?)
`

type CreateVideoTagsParams struct {
	VideoID string
	TagID   int32
}

func (q *Queries) CreateVideoTags(ctx context.Context, arg CreateVideoTagsParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createVideoTags, arg.VideoID, arg.TagID)
}

const createtUser = `-- name: CreatetUser :execresult
INSERT INTO user (id, name, profile_image_url) VALUES (?, ?, ?)
`

type CreatetUserParams struct {
	ID              string
	Name            string
	ProfileImageUrl string
}

func (q *Queries) CreatetUser(ctx context.Context, arg CreatetUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createtUser, arg.ID, arg.Name, arg.ProfileImageUrl)
}

const getAllVideosTags = `-- name: GetAllVideosTags :many
SELECT
    v.id AS video_id,
    t.id AS tag_id,
    t.tag_name
FROM
    video v
    INNER JOIN video_tags vt ON v.id = vt.video_id
    INNER JOIN tag t ON vt.tag_id = t.id
WHERE
    v.is_adult = false
    AND v.is_ad = false
    AND v.is_private = false
`

type GetAllVideosTagsRow struct {
	VideoID string
	TagID   int32
	TagName string
}

func (q *Queries) GetAllVideosTags(ctx context.Context) ([]GetAllVideosTagsRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllVideosTags)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllVideosTagsRow
	for rows.Next() {
		var i GetAllVideosTagsRow
		if err := rows.Scan(&i.VideoID, &i.TagID, &i.TagName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllVideosTagsByUserID = `-- name: GetAllVideosTagsByUserID :many
SELECT
    v.id AS video_id,
    t.id AS tag_id,
    t.tag_name
FROM
    video v
    INNER JOIN video_tags vt ON v.id = vt.video_id
    INNER JOIN tag t ON vt.tag_id = t.id
WHERE
    v.uploader_id = ?
    AND v.is_adult = false
    AND v.is_ad = false
    AND v.is_private = false
`

type GetAllVideosTagsByUserIDRow struct {
	VideoID string
	TagID   int32
	TagName string
}

func (q *Queries) GetAllVideosTagsByUserID(ctx context.Context, uploaderID string) ([]GetAllVideosTagsByUserIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllVideosTagsByUserID, uploaderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllVideosTagsByUserIDRow
	for rows.Next() {
		var i GetAllVideosTagsByUserIDRow
		if err := rows.Scan(&i.VideoID, &i.TagID, &i.TagName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPublicAndNonAdByUploaderID = `-- name: GetPublicAndNonAdByUploaderID :many
SELECT id, video_url, thumbnail_image_url, title, description, created_at, updated_at, is_private, is_adult, is_ad, uploader_id, watch_count, is_external_cutout FROM video WHERE is_private   = false AND is_ad = false AND uploader_id = ?
`

func (q *Queries) GetPublicAndNonAdByUploaderID(ctx context.Context, uploaderID string) ([]Video, error) {
	rows, err := q.db.QueryContext(ctx, getPublicAndNonAdByUploaderID, uploaderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Video
	for rows.Next() {
		var i Video
		if err := rows.Scan(
			&i.ID,
			&i.VideoUrl,
			&i.ThumbnailImageUrl,
			&i.Title,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsPrivate,
			&i.IsAdult,
			&i.IsAd,
			&i.UploaderID,
			&i.WatchCount,
			&i.IsExternalCutout,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPublicAndNonAdultNonAdVideos = `-- name: GetPublicAndNonAdultNonAdVideos :many

SELECT id, video_url, thumbnail_image_url, title, description, created_at, updated_at, is_private, is_adult, is_ad, uploader_id, watch_count, is_external_cutout FROM video WHERE is_private   = false AND is_adult = false AND is_ad = false
`

// SELECT * FROM video WHERE id = ? LIMIT 1;
func (q *Queries) GetPublicAndNonAdultNonAdVideos(ctx context.Context) ([]Video, error) {
	rows, err := q.db.QueryContext(ctx, getPublicAndNonAdultNonAdVideos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Video
	for rows.Next() {
		var i Video
		if err := rows.Scan(
			&i.ID,
			&i.VideoUrl,
			&i.ThumbnailImageUrl,
			&i.Title,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsPrivate,
			&i.IsAdult,
			&i.IsAd,
			&i.UploaderID,
			&i.WatchCount,
			&i.IsExternalCutout,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT id, name, profile_image_url FROM user WHERE id = ? LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(&i.ID, &i.Name, &i.ProfileImageUrl)
	return i, err
}

const getUserSubscribeChannelsID = `-- name: GetUserSubscribeChannelsID :many
SELECT u.id FROM user AS u JOIN subscription AS s ON u.id = s.channel_id WHERE s.user_id = ?
`

func (q *Queries) GetUserSubscribeChannelsID(ctx context.Context, userID string) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getUserSubscribeChannelsID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var id string
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserSubscriptionID = `-- name: GetUserSubscriptionID :one
SELECT u.id FROM user AS u JOIN subscription AS s ON u.id = s.channel_id WHERE s.user_id = ? AND s.channel_id = ? LIMIT 1
`

type GetUserSubscriptionIDParams struct {
	UserID    string
	ChannelID string
}

func (q *Queries) GetUserSubscriptionID(ctx context.Context, arg GetUserSubscriptionIDParams) (string, error) {
	row := q.db.QueryRowContext(ctx, getUserSubscriptionID, arg.UserID, arg.ChannelID)
	var id string
	err := row.Scan(&id)
	return id, err
}

const getVideo = `-- name: GetVideo :one
SELECT id, video_url, thumbnail_image_url, title, description, is_private, is_adult, is_ad, uploader_id, watch_count, is_external_cutout FROM video WHERE id = ? LIMIT 1
`

type GetVideoRow struct {
	ID                string
	VideoUrl          string
	ThumbnailImageUrl string
	Title             string
	Description       sql.NullString
	IsPrivate         bool
	IsAdult           bool
	IsAd              bool
	UploaderID        string
	WatchCount        int32
	IsExternalCutout  bool
}

func (q *Queries) GetVideo(ctx context.Context, id string) (GetVideoRow, error) {
	row := q.db.QueryRowContext(ctx, getVideo, id)
	var i GetVideoRow
	err := row.Scan(
		&i.ID,
		&i.VideoUrl,
		&i.ThumbnailImageUrl,
		&i.Title,
		&i.Description,
		&i.IsPrivate,
		&i.IsAdult,
		&i.IsAd,
		&i.UploaderID,
		&i.WatchCount,
		&i.IsExternalCutout,
	)
	return i, err
}

const getVideoComments = `-- name: GetVideoComments :many
SELECT c.id, c.video_id, c.text, c.created_at, c.updated_at, c.user_id , u.name  FROM comment c INNER JOIN user u ON c.user_id = u.id WHERE video_id = ?
`

type GetVideoCommentsRow struct {
	ID        string
	VideoID   string
	Text      string
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    sql.NullString
	Name      string
}

func (q *Queries) GetVideoComments(ctx context.Context, videoID string) ([]GetVideoCommentsRow, error) {
	rows, err := q.db.QueryContext(ctx, getVideoComments, videoID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetVideoCommentsRow
	for rows.Next() {
		var i GetVideoCommentsRow
		if err := rows.Scan(
			&i.ID,
			&i.VideoID,
			&i.Text,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getVideoDislikes = `-- name: GetVideoDislikes :many
SELECT id, user_id, video_id, comment_id, is_like, created_at FROM like_dislike WHERE video_id = ? AND is_like = false
`

func (q *Queries) GetVideoDislikes(ctx context.Context, videoID sql.NullString) ([]LikeDislike, error) {
	rows, err := q.db.QueryContext(ctx, getVideoDislikes, videoID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []LikeDislike
	for rows.Next() {
		var i LikeDislike
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.VideoID,
			&i.CommentID,
			&i.IsLike,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getVideoLikes = `-- name: GetVideoLikes :many
SELECT id, user_id, video_id, comment_id, is_like, created_at FROM like_dislike WHERE video_id = ? AND is_like = true
`

func (q *Queries) GetVideoLikes(ctx context.Context, videoID sql.NullString) ([]LikeDislike, error) {
	rows, err := q.db.QueryContext(ctx, getVideoLikes, videoID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []LikeDislike
	for rows.Next() {
		var i LikeDislike
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.VideoID,
			&i.CommentID,
			&i.IsLike,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getVideoTags = `-- name: GetVideoTags :many
SELECT t.id, t.tag_name FROM tag AS t JOIN video_tags AS vt ON t.id = vt.tag_id WHERE vt.video_id = ?
`

func (q *Queries) GetVideoTags(ctx context.Context, videoID string) ([]Tag, error) {
	rows, err := q.db.QueryContext(ctx, getVideoTags, videoID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tag
	for rows.Next() {
		var i Tag
		if err := rows.Scan(&i.ID, &i.TagName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const subscribeChannel = `-- name: SubscribeChannel :execresult
INSERT INTO subscription (user_id, channel_id) VALUES (?, ?)
`

type SubscribeChannelParams struct {
	UserID    string
	ChannelID string
}

func (q *Queries) SubscribeChannel(ctx context.Context, arg SubscribeChannelParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, subscribeChannel, arg.UserID, arg.ChannelID)
}

const unSubscribeChannel = `-- name: UnSubscribeChannel :execresult
DELETE FROM subscription WHERE user_id = ? AND channel_id = ?
`

type UnSubscribeChannelParams struct {
	UserID    string
	ChannelID string
}

func (q *Queries) UnSubscribeChannel(ctx context.Context, arg UnSubscribeChannelParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, unSubscribeChannel, arg.UserID, arg.ChannelID)
}
