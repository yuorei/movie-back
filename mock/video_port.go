// Code generated by MockGen. DO NOT EDIT.
// Source: ./app/application/port/video_port.go

// Package mock_port is a generated GoMock package.
package mock_port

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/yuorei/video-server/app/domain"
)

// MockVideoInputPort is a mock of VideoInputPort interface.
type MockVideoInputPort struct {
	ctrl     *gomock.Controller
	recorder *MockVideoInputPortMockRecorder
}

// MockVideoInputPortMockRecorder is the mock recorder for MockVideoInputPort.
type MockVideoInputPortMockRecorder struct {
	mock *MockVideoInputPort
}

// NewMockVideoInputPort creates a new mock instance.
func NewMockVideoInputPort(ctrl *gomock.Controller) *MockVideoInputPort {
	mock := &MockVideoInputPort{ctrl: ctrl}
	mock.recorder = &MockVideoInputPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVideoInputPort) EXPECT() *MockVideoInputPortMockRecorder {
	return m.recorder
}

// GetVideo mocks base method.
func (m *MockVideoInputPort) GetVideo(arg0 context.Context, arg1 string) (*domain.Video, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVideo", arg0, arg1)
	ret0, _ := ret[0].(*domain.Video)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVideo indicates an expected call of GetVideo.
func (mr *MockVideoInputPortMockRecorder) GetVideo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVideo", reflect.TypeOf((*MockVideoInputPort)(nil).GetVideo), arg0, arg1)
}

// GetVideos mocks base method.
func (m *MockVideoInputPort) GetVideos(arg0 context.Context) ([]*domain.Video, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVideos", arg0)
	ret0, _ := ret[0].([]*domain.Video)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVideos indicates an expected call of GetVideos.
func (mr *MockVideoInputPortMockRecorder) GetVideos(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVideos", reflect.TypeOf((*MockVideoInputPort)(nil).GetVideos), arg0)
}

// GetVideosByUserID mocks base method.
func (m *MockVideoInputPort) GetVideosByUserID(arg0 context.Context, arg1 string) ([]*domain.Video, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVideosByUserID", arg0, arg1)
	ret0, _ := ret[0].([]*domain.Video)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVideosByUserID indicates an expected call of GetVideosByUserID.
func (mr *MockVideoInputPortMockRecorder) GetVideosByUserID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVideosByUserID", reflect.TypeOf((*MockVideoInputPort)(nil).GetVideosByUserID), arg0, arg1)
}

// UploadVideo mocks base method.
func (m *MockVideoInputPort) UploadVideo(arg0 context.Context, arg1 *domain.UploadVideo) (*domain.UploadVideoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadVideo", arg0, arg1)
	ret0, _ := ret[0].(*domain.UploadVideoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadVideo indicates an expected call of UploadVideo.
func (mr *MockVideoInputPortMockRecorder) UploadVideo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadVideo", reflect.TypeOf((*MockVideoInputPort)(nil).UploadVideo), arg0, arg1)
}

// MockVideoRepository is a mock of VideoRepository interface.
type MockVideoRepository struct {
	ctrl     *gomock.Controller
	recorder *MockVideoRepositoryMockRecorder
}

// MockVideoRepositoryMockRecorder is the mock recorder for MockVideoRepository.
type MockVideoRepositoryMockRecorder struct {
	mock *MockVideoRepository
}

// NewMockVideoRepository creates a new mock instance.
func NewMockVideoRepository(ctrl *gomock.Controller) *MockVideoRepository {
	mock := &MockVideoRepository{ctrl: ctrl}
	mock.recorder = &MockVideoRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVideoRepository) EXPECT() *MockVideoRepositoryMockRecorder {
	return m.recorder
}

// ConvertVideoHLS mocks base method.
func (m *MockVideoRepository) ConvertVideoHLS(arg0 context.Context, arg1 *domain.VideoFile) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConvertVideoHLS", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConvertVideoHLS indicates an expected call of ConvertVideoHLS.
func (mr *MockVideoRepositoryMockRecorder) ConvertVideoHLS(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConvertVideoHLS", reflect.TypeOf((*MockVideoRepository)(nil).ConvertVideoHLS), arg0, arg1)
}

// GetVideoFromDB mocks base method.
func (m *MockVideoRepository) GetVideoFromDB(arg0 context.Context, arg1 string) (*domain.Video, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVideoFromDB", arg0, arg1)
	ret0, _ := ret[0].(*domain.Video)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVideoFromDB indicates an expected call of GetVideoFromDB.
func (mr *MockVideoRepositoryMockRecorder) GetVideoFromDB(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVideoFromDB", reflect.TypeOf((*MockVideoRepository)(nil).GetVideoFromDB), arg0, arg1)
}

// GetVideosByUserIDFromDB mocks base method.
func (m *MockVideoRepository) GetVideosByUserIDFromDB(arg0 context.Context, arg1 string) ([]*domain.Video, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVideosByUserIDFromDB", arg0, arg1)
	ret0, _ := ret[0].([]*domain.Video)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVideosByUserIDFromDB indicates an expected call of GetVideosByUserIDFromDB.
func (mr *MockVideoRepositoryMockRecorder) GetVideosByUserIDFromDB(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVideosByUserIDFromDB", reflect.TypeOf((*MockVideoRepository)(nil).GetVideosByUserIDFromDB), arg0, arg1)
}

// GetVideosFromDB mocks base method.
func (m *MockVideoRepository) GetVideosFromDB(arg0 context.Context) ([]*domain.Video, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVideosFromDB", arg0)
	ret0, _ := ret[0].([]*domain.Video)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVideosFromDB indicates an expected call of GetVideosFromDB.
func (mr *MockVideoRepositoryMockRecorder) GetVideosFromDB(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVideosFromDB", reflect.TypeOf((*MockVideoRepository)(nil).GetVideosFromDB), arg0)
}

// InsertVideo mocks base method.
func (m *MockVideoRepository) InsertVideo(arg0 context.Context, arg1, arg2, arg3, arg4 string, arg5 *string, arg6 string) (*domain.UploadVideoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertVideo", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(*domain.UploadVideoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertVideo indicates an expected call of InsertVideo.
func (mr *MockVideoRepositoryMockRecorder) InsertVideo(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertVideo", reflect.TypeOf((*MockVideoRepository)(nil).InsertVideo), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// UploadVideoForStorage mocks base method.
func (m *MockVideoRepository) UploadVideoForStorage(arg0 context.Context, arg1 *domain.VideoFile) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadVideoForStorage", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadVideoForStorage indicates an expected call of UploadVideoForStorage.
func (mr *MockVideoRepositoryMockRecorder) UploadVideoForStorage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadVideoForStorage", reflect.TypeOf((*MockVideoRepository)(nil).UploadVideoForStorage), arg0, arg1)
}
